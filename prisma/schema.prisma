
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  provider             String?
  accountId            String    @map("providerAccountId")
  refreshToken         String?   @map("refresh_token") @db.Text
  accessToken          String?   @map("access_token") @db.Text
  accessTokenExpiresAt DateTime? @map("access_token_expires")
  scope                String?
  idToken              String?   @map("id_token") @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  providerId            String
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([provider, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique @map("sessionToken")
  userId    String
  expiresAt DateTime @map("expires")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]

  UserImage UserImage[]
  createdAt DateTime
  updatedAt DateTime

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model UserImage {
  id            String     @id @default(cuid())
  identifier    String     @unique @default("")
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  cloudflareUrl String
  visibility    Visibility
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
